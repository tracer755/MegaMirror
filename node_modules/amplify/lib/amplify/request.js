// Generated by CoffeeScript 1.6.3
var define, http, https, replacePathTemplates, request, resources, types, url, utils;

http = require('http');

https = require('https');

url = require('url');

utils = require('./utils');

replacePathTemplates = function(pathname, data) {
  var match, matches, path, prop, replaceValue, _i, _len;
  if (data == null) {
    return;
  }
  path = pathname;
  matches = path.match(/{[\w\d]*}/g);
  if (matches == null) {
    return path;
  }
  for (_i = 0, _len = matches.length; _i < _len; _i++) {
    match = matches[_i];
    prop = match.replace('{', '').replace('}', '');
    replaceValue = data[prop];
    if (replaceValue != null) {
      path = path.replace(match, replaceValue);
    }
  }
  return path;
};

request = function(resourceId, data, callback) {
  var resource, settings;
  settings = resourceId || {};
  if (utils.isType(resourceId, 'string')) {
    if (utils.isType(data, 'function')) {
      callback = data;
      data = {};
    }
    settings = {
      resourceId: resourceId,
      data: data || {},
      success: callback
    };
  }
  resource = resources[settings.resourceId];
  if (resource == null) {
    throw "unknown resourceId: " + settings.resourceId;
  }
  resource.settings.data = settings.data || {};
  resource.settings.success = settings.success;
  resource.settings.error = settings != null ? settings.error : void 0;
  console.log;
  if (utils.isType(resource.type, 'function')) {
    return resource.type(resource.settings);
  } else {
    return types[resource.type](resource.settings);
  }
};

exports.request = request;

define = function(resourceId, type, settings) {
  if (settings == null) {
    settings = {};
  }
  if (resourceId == null) {
    throw 'resourceId is required';
  }
  if (type == null) {
    throw 'type is required';
  }
  if (!((types[type] != null) || utils.isType(type, 'function'))) {
    throw 'type is not defined';
  }
  return resources[resourceId] = {
    type: type,
    settings: settings
  };
};

exports.request.define = define;

resources = {};

exports.request.resources = resources;

types = [];

exports.request.types = types;

types.ajax = function(settings) {
  var ampXHR, data, options, req, requestFunction, urlParts;
  if (settings.type == null) {
    settings.type = 'GET';
  }
  urlParts = url.parse(settings.url);
  options = {
    hostname: urlParts.hostname,
    port: urlParts.port,
    path: replacePathTemplates(urlParts.path, settings.data),
    method: settings.type,
    headers: {
      'content-type': settings.dataType === 'json' ? 'application/json' : 'text/xml'
    }
  };
  ampXHR = {
    setRequestHeader: function(key, value) {
      return options.headers[key] = value;
    }
  };
  data = '';
  req = null;
  requestFunction = function(res) {
    res.on('data', function(chunk) {
      return data += chunk;
    });
    res.on('end', function() {
      if (settings.dataType === 'json' && data !== '') {
        data = JSON.parse(data);
      }
      if (res.statusCode >= 400) {
        return settings.error(data, 'error');
      }
      if (settings.success != null) {
        return settings.success(data, 'success');
      }
    });
    return res.on('error', function(err) {
      if (settings.error != null) {
        return settings.error(err, 'error');
      }
    });
  };
  if (typeof settings.beforeSend === "function") {
    settings.beforeSend(ampXHR, settings);
  }
  req = urlParts.protocol === 'https:' ? https.request(options, requestFunction) : http.request(options, requestFunction);
  req.on('error', function(err) {
    if (settings.error != null) {
      return settings.error(err, 'error');
    }
  });
  if (options.method === 'POST' || options.method === 'PUT') {
    req.write(JSON.stringify(settings.data));
  }
  return req.end();
};
